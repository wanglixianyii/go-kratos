// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: authority/v1/authority.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Authority_MenuList_FullMethodName       = "/authority.v1.authority/MenuList"
	Authority_CreateMenu_FullMethodName     = "/authority.v1.authority/CreateMenu"
	Authority_UpdateMenu_FullMethodName     = "/authority.v1.authority/UpdateMenu"
	Authority_DeleteMenu_FullMethodName     = "/authority.v1.authority/DeleteMenu"
	Authority_DetailMenu_FullMethodName     = "/authority.v1.authority/DetailMenu"
	Authority_RoleList_FullMethodName       = "/authority.v1.authority/RoleList"
	Authority_CreateRole_FullMethodName     = "/authority.v1.authority/CreateRole"
	Authority_UpdateRole_FullMethodName     = "/authority.v1.authority/UpdateRole"
	Authority_DeleteRole_FullMethodName     = "/authority.v1.authority/DeleteRole"
	Authority_RoleMenuList_FullMethodName   = "/authority.v1.authority/RoleMenuList"
	Authority_UpdateRoleMenu_FullMethodName = "/authority.v1.authority/UpdateRoleMenu"
)

// AuthorityClient is the client API for Authority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorityClient interface {
	// 菜单
	MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListResp, error)
	CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuResp, error)
	UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuResp, error)
	DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuResp, error)
	DetailMenu(ctx context.Context, in *DetailMenuReq, opts ...grpc.CallOption) (*DetailMenuResp, error)
	// 角色
	RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error)
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error)
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error)
	// 角色关联菜单
	RoleMenuList(ctx context.Context, in *RoleMenuListReq, opts ...grpc.CallOption) (*RoleMenuListResp, error)
	UpdateRoleMenu(ctx context.Context, in *UpdateRoleMenuReq, opts ...grpc.CallOption) (*UpdateRoleMenuResp, error)
}

type authorityClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityClient(cc grpc.ClientConnInterface) AuthorityClient {
	return &authorityClient{cc}
}

func (c *authorityClient) MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListResp, error) {
	out := new(MenuListResp)
	err := c.cc.Invoke(ctx, Authority_MenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuResp, error) {
	out := new(CreateMenuResp)
	err := c.cc.Invoke(ctx, Authority_CreateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuResp, error) {
	out := new(UpdateMenuResp)
	err := c.cc.Invoke(ctx, Authority_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuResp, error) {
	out := new(DeleteMenuResp)
	err := c.cc.Invoke(ctx, Authority_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) DetailMenu(ctx context.Context, in *DetailMenuReq, opts ...grpc.CallOption) (*DetailMenuResp, error) {
	out := new(DetailMenuResp)
	err := c.cc.Invoke(ctx, Authority_DetailMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	out := new(RoleListResp)
	err := c.cc.Invoke(ctx, Authority_RoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error) {
	out := new(CreateRoleResp)
	err := c.cc.Invoke(ctx, Authority_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	out := new(UpdateRoleResp)
	err := c.cc.Invoke(ctx, Authority_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error) {
	out := new(DeleteRoleResp)
	err := c.cc.Invoke(ctx, Authority_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) RoleMenuList(ctx context.Context, in *RoleMenuListReq, opts ...grpc.CallOption) (*RoleMenuListResp, error) {
	out := new(RoleMenuListResp)
	err := c.cc.Invoke(ctx, Authority_RoleMenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) UpdateRoleMenu(ctx context.Context, in *UpdateRoleMenuReq, opts ...grpc.CallOption) (*UpdateRoleMenuResp, error) {
	out := new(UpdateRoleMenuResp)
	err := c.cc.Invoke(ctx, Authority_UpdateRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityServer is the server API for Authority service.
// All implementations must embed UnimplementedAuthorityServer
// for forward compatibility
type AuthorityServer interface {
	// 菜单
	MenuList(context.Context, *MenuListReq) (*MenuListResp, error)
	CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuResp, error)
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuResp, error)
	DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuResp, error)
	DetailMenu(context.Context, *DetailMenuReq) (*DetailMenuResp, error)
	// 角色
	RoleList(context.Context, *RoleListReq) (*RoleListResp, error)
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleResp, error)
	// 角色关联菜单
	RoleMenuList(context.Context, *RoleMenuListReq) (*RoleMenuListResp, error)
	UpdateRoleMenu(context.Context, *UpdateRoleMenuReq) (*UpdateRoleMenuResp, error)
	mustEmbedUnimplementedAuthorityServer()
}

// UnimplementedAuthorityServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorityServer struct {
}

func (UnimplementedAuthorityServer) MenuList(context.Context, *MenuListReq) (*MenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuList not implemented")
}
func (UnimplementedAuthorityServer) CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAuthorityServer) UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedAuthorityServer) DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedAuthorityServer) DetailMenu(context.Context, *DetailMenuReq) (*DetailMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailMenu not implemented")
}
func (UnimplementedAuthorityServer) RoleList(context.Context, *RoleListReq) (*RoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (UnimplementedAuthorityServer) CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthorityServer) UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthorityServer) DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthorityServer) RoleMenuList(context.Context, *RoleMenuListReq) (*RoleMenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleMenuList not implemented")
}
func (UnimplementedAuthorityServer) UpdateRoleMenu(context.Context, *UpdateRoleMenuReq) (*UpdateRoleMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleMenu not implemented")
}
func (UnimplementedAuthorityServer) mustEmbedUnimplementedAuthorityServer() {}

// UnsafeAuthorityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorityServer will
// result in compilation errors.
type UnsafeAuthorityServer interface {
	mustEmbedUnimplementedAuthorityServer()
}

func RegisterAuthorityServer(s grpc.ServiceRegistrar, srv AuthorityServer) {
	s.RegisterService(&Authority_ServiceDesc, srv)
}

func _Authority_MenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).MenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_MenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).MenuList(ctx, req.(*MenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).CreateMenu(ctx, req.(*CreateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).UpdateMenu(ctx, req.(*UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).DeleteMenu(ctx, req.(*DeleteMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_DetailMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).DetailMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_DetailMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).DetailMenu(ctx, req.(*DetailMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_RoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).RoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_RoleMenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).RoleMenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_RoleMenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).RoleMenuList(ctx, req.(*RoleMenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_UpdateRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).UpdateRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_UpdateRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).UpdateRoleMenu(ctx, req.(*UpdateRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Authority_ServiceDesc is the grpc.ServiceDesc for Authority service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authority_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authority.v1.authority",
	HandlerType: (*AuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MenuList",
			Handler:    _Authority_MenuList_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Authority_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Authority_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Authority_DeleteMenu_Handler,
		},
		{
			MethodName: "DetailMenu",
			Handler:    _Authority_DetailMenu_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _Authority_RoleList_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Authority_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Authority_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Authority_DeleteRole_Handler,
		},
		{
			MethodName: "RoleMenuList",
			Handler:    _Authority_RoleMenuList_Handler,
		},
		{
			MethodName: "UpdateRoleMenu",
			Handler:    _Authority_UpdateRoleMenu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authority/v1/authority.proto",
}
