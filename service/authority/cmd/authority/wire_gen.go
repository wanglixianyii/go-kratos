// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
	"github.com/wanglixianyii/go-kratos/rpc-authority/internal/biz"
	"github.com/wanglixianyii/go-kratos/rpc-authority/internal/conf"
	"github.com/wanglixianyii/go-kratos/rpc-authority/internal/data"
	"github.com/wanglixianyii/go-kratos/rpc-authority/internal/server"
	"github.com/wanglixianyii/go-kratos/rpc-authority/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(logger log.Logger, registrar registry.Registrar, bootstrap *conf.Bootstrap) (*kratos.App, func(), error) {
	db := data.NewDB(bootstrap)
	client := data.NewRedis(bootstrap)
	dataData, cleanup, err := data.NewData(bootstrap, logger, db, client)
	if err != nil {
		return nil, nil, err
	}
	menuRepo := data.NewMenuRepo(dataData, logger)
	menuUseCase := biz.NewMenuUseCase(menuRepo, logger)
	authorityService := service.NewAuthorityService(menuUseCase, logger)
	grpcServer := server.NewGRPCServer(bootstrap, authorityService, logger)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
