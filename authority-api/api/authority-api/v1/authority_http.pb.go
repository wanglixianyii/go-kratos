// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v3.19.4
// source: authority-api/v1/authority.proto

package v1

import (
	v1 "authority-api/api/service/authority-rpc/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthorityCreateMenu = "/authority.api.v1.Authority/CreateMenu"
const OperationAuthorityDeleteMenu = "/authority.api.v1.Authority/DeleteMenu"
const OperationAuthorityDetailMenu = "/authority.api.v1.Authority/DetailMenu"
const OperationAuthorityMenuList = "/authority.api.v1.Authority/MenuList"
const OperationAuthorityUpdateMenu = "/authority.api.v1.Authority/UpdateMenu"

type AuthorityHTTPServer interface {
	CreateMenu(context.Context, *v1.CreateMenuReq) (*v1.CreateMenuResp, error)
	DeleteMenu(context.Context, *v1.DeleteMenuReq) (*v1.DeleteMenuResp, error)
	DetailMenu(context.Context, *v1.DetailMenuReq) (*v1.DetailMenuResp, error)
	// MenuList 菜单
	MenuList(context.Context, *v1.MenuListReq) (*v1.MenuListResp, error)
	UpdateMenu(context.Context, *v1.UpdateMenuReq) (*v1.UpdateMenuResp, error)
}

func RegisterAuthorityHTTPServer(s *http.Server, srv AuthorityHTTPServer) {
	r := s.Route("/")
	r.POST("/authority-rpc-api/v1/menu/list", _Authority_MenuList0_HTTP_Handler(srv))
	r.POST("/authority-rpc-api/v1/menu/create", _Authority_CreateMenu0_HTTP_Handler(srv))
	r.PUT("/authority-rpc-api/v1/menu/update", _Authority_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/authority-rpc-api/v1/menu/delete", _Authority_DeleteMenu0_HTTP_Handler(srv))
	r.POST("/authority-rpc-api/v1/menu/detail", _Authority_DetailMenu0_HTTP_Handler(srv))
}

func _Authority_MenuList0_HTTP_Handler(srv AuthorityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.MenuListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityMenuList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MenuList(ctx, req.(*v1.MenuListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.MenuListResp)
		return ctx.Result(200, reply)
	}
}

func _Authority_CreateMenu0_HTTP_Handler(srv AuthorityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CreateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityCreateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*v1.CreateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateMenuResp)
		return ctx.Result(200, reply)
	}
}

func _Authority_UpdateMenu0_HTTP_Handler(srv AuthorityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityUpdateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*v1.UpdateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateMenuResp)
		return ctx.Result(200, reply)
	}
}

func _Authority_DeleteMenu0_HTTP_Handler(srv AuthorityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityDeleteMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*v1.DeleteMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteMenuResp)
		return ctx.Result(200, reply)
	}
}

func _Authority_DetailMenu0_HTTP_Handler(srv AuthorityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DetailMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorityDetailMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DetailMenu(ctx, req.(*v1.DetailMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DetailMenuResp)
		return ctx.Result(200, reply)
	}
}

type AuthorityHTTPClient interface {
	CreateMenu(ctx context.Context, req *v1.CreateMenuReq, opts ...http.CallOption) (rsp *v1.CreateMenuResp, err error)
	DeleteMenu(ctx context.Context, req *v1.DeleteMenuReq, opts ...http.CallOption) (rsp *v1.DeleteMenuResp, err error)
	DetailMenu(ctx context.Context, req *v1.DetailMenuReq, opts ...http.CallOption) (rsp *v1.DetailMenuResp, err error)
	MenuList(ctx context.Context, req *v1.MenuListReq, opts ...http.CallOption) (rsp *v1.MenuListResp, err error)
	UpdateMenu(ctx context.Context, req *v1.UpdateMenuReq, opts ...http.CallOption) (rsp *v1.UpdateMenuResp, err error)
}

type AuthorityHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthorityHTTPClient(client *http.Client) AuthorityHTTPClient {
	return &AuthorityHTTPClientImpl{client}
}

func (c *AuthorityHTTPClientImpl) CreateMenu(ctx context.Context, in *v1.CreateMenuReq, opts ...http.CallOption) (*v1.CreateMenuResp, error) {
	var out v1.CreateMenuResp
	pattern := "/authority-rpc-api/v1/menu/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorityCreateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityHTTPClientImpl) DeleteMenu(ctx context.Context, in *v1.DeleteMenuReq, opts ...http.CallOption) (*v1.DeleteMenuResp, error) {
	var out v1.DeleteMenuResp
	pattern := "/authority-rpc-api/v1/menu/delete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorityDeleteMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityHTTPClientImpl) DetailMenu(ctx context.Context, in *v1.DetailMenuReq, opts ...http.CallOption) (*v1.DetailMenuResp, error) {
	var out v1.DetailMenuResp
	pattern := "/authority-rpc-api/v1/menu/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorityDetailMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityHTTPClientImpl) MenuList(ctx context.Context, in *v1.MenuListReq, opts ...http.CallOption) (*v1.MenuListResp, error) {
	var out v1.MenuListResp
	pattern := "/authority-rpc-api/v1/menu/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorityMenuList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorityHTTPClientImpl) UpdateMenu(ctx context.Context, in *v1.UpdateMenuReq, opts ...http.CallOption) (*v1.UpdateMenuResp, error) {
	var out v1.UpdateMenuResp
	pattern := "/authority-rpc-api/v1/menu/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorityUpdateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
