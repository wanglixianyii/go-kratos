// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: authority-api/v1/authority.proto

package v1

import (
	v1 "authority-api/api/service/authority-rpc/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Authority_MenuList_FullMethodName   = "/authority.api.v1.Authority/MenuList"
	Authority_CreateMenu_FullMethodName = "/authority.api.v1.Authority/CreateMenu"
	Authority_UpdateMenu_FullMethodName = "/authority.api.v1.Authority/UpdateMenu"
	Authority_DeleteMenu_FullMethodName = "/authority.api.v1.Authority/DeleteMenu"
	Authority_DetailMenu_FullMethodName = "/authority.api.v1.Authority/DetailMenu"
)

// AuthorityClient is the client API for Authority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorityClient interface {
	// 菜单
	MenuList(ctx context.Context, in *v1.MenuListReq, opts ...grpc.CallOption) (*v1.MenuListResp, error)
	CreateMenu(ctx context.Context, in *v1.CreateMenuReq, opts ...grpc.CallOption) (*v1.CreateMenuResp, error)
	UpdateMenu(ctx context.Context, in *v1.UpdateMenuReq, opts ...grpc.CallOption) (*v1.UpdateMenuResp, error)
	DeleteMenu(ctx context.Context, in *v1.DeleteMenuReq, opts ...grpc.CallOption) (*v1.DeleteMenuResp, error)
	DetailMenu(ctx context.Context, in *v1.DetailMenuReq, opts ...grpc.CallOption) (*v1.DetailMenuResp, error)
}

type authorityClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityClient(cc grpc.ClientConnInterface) AuthorityClient {
	return &authorityClient{cc}
}

func (c *authorityClient) MenuList(ctx context.Context, in *v1.MenuListReq, opts ...grpc.CallOption) (*v1.MenuListResp, error) {
	out := new(v1.MenuListResp)
	err := c.cc.Invoke(ctx, Authority_MenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) CreateMenu(ctx context.Context, in *v1.CreateMenuReq, opts ...grpc.CallOption) (*v1.CreateMenuResp, error) {
	out := new(v1.CreateMenuResp)
	err := c.cc.Invoke(ctx, Authority_CreateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) UpdateMenu(ctx context.Context, in *v1.UpdateMenuReq, opts ...grpc.CallOption) (*v1.UpdateMenuResp, error) {
	out := new(v1.UpdateMenuResp)
	err := c.cc.Invoke(ctx, Authority_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) DeleteMenu(ctx context.Context, in *v1.DeleteMenuReq, opts ...grpc.CallOption) (*v1.DeleteMenuResp, error) {
	out := new(v1.DeleteMenuResp)
	err := c.cc.Invoke(ctx, Authority_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) DetailMenu(ctx context.Context, in *v1.DetailMenuReq, opts ...grpc.CallOption) (*v1.DetailMenuResp, error) {
	out := new(v1.DetailMenuResp)
	err := c.cc.Invoke(ctx, Authority_DetailMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityServer is the server API for Authority service.
// All implementations must embed UnimplementedAuthorityServer
// for forward compatibility
type AuthorityServer interface {
	// 菜单
	MenuList(context.Context, *v1.MenuListReq) (*v1.MenuListResp, error)
	CreateMenu(context.Context, *v1.CreateMenuReq) (*v1.CreateMenuResp, error)
	UpdateMenu(context.Context, *v1.UpdateMenuReq) (*v1.UpdateMenuResp, error)
	DeleteMenu(context.Context, *v1.DeleteMenuReq) (*v1.DeleteMenuResp, error)
	DetailMenu(context.Context, *v1.DetailMenuReq) (*v1.DetailMenuResp, error)
	mustEmbedUnimplementedAuthorityServer()
}

// UnimplementedAuthorityServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorityServer struct {
}

func (UnimplementedAuthorityServer) MenuList(context.Context, *v1.MenuListReq) (*v1.MenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuList not implemented")
}
func (UnimplementedAuthorityServer) CreateMenu(context.Context, *v1.CreateMenuReq) (*v1.CreateMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAuthorityServer) UpdateMenu(context.Context, *v1.UpdateMenuReq) (*v1.UpdateMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedAuthorityServer) DeleteMenu(context.Context, *v1.DeleteMenuReq) (*v1.DeleteMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedAuthorityServer) DetailMenu(context.Context, *v1.DetailMenuReq) (*v1.DetailMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailMenu not implemented")
}
func (UnimplementedAuthorityServer) mustEmbedUnimplementedAuthorityServer() {}

// UnsafeAuthorityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorityServer will
// result in compilation errors.
type UnsafeAuthorityServer interface {
	mustEmbedUnimplementedAuthorityServer()
}

func RegisterAuthorityServer(s grpc.ServiceRegistrar, srv AuthorityServer) {
	s.RegisterService(&Authority_ServiceDesc, srv)
}

func _Authority_MenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).MenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_MenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).MenuList(ctx, req.(*v1.MenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).CreateMenu(ctx, req.(*v1.CreateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).UpdateMenu(ctx, req.(*v1.UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).DeleteMenu(ctx, req.(*v1.DeleteMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_DetailMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DetailMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).DetailMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authority_DetailMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).DetailMenu(ctx, req.(*v1.DetailMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Authority_ServiceDesc is the grpc.ServiceDesc for Authority service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authority_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authority.api.v1.Authority",
	HandlerType: (*AuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MenuList",
			Handler:    _Authority_MenuList_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Authority_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Authority_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Authority_DeleteMenu_Handler,
		},
		{
			MethodName: "DetailMenu",
			Handler:    _Authority_DetailMenu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authority-api/v1/authority.proto",
}
