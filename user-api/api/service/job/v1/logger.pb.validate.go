// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/service/job/v1/logger.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListSensorReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSensorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSensorReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSensorReqMultiError, or
// nil if none found.
func (m *ListSensorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSensorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListSensorReqMultiError(errors)
	}

	return nil
}

// ListSensorReqMultiError is an error wrapping multiple validation errors
// returned by ListSensorReq.ValidateAll() if the designated constraints
// aren't met.
type ListSensorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSensorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSensorReqMultiError) AllErrors() []error { return m }

// ListSensorReqValidationError is the validation error returned by
// ListSensorReq.Validate if the designated constraints aren't met.
type ListSensorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSensorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSensorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSensorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSensorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSensorReqValidationError) ErrorName() string { return "ListSensorReqValidationError" }

// Error satisfies the builtin error interface
func (e ListSensorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSensorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSensorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSensorReqValidationError{}

// Validate checks the field values on ListSensorReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSensorReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSensorReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSensorReplyMultiError, or nil if none found.
func (m *ListSensorReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSensorReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSensorReplyValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSensorReplyValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSensorReplyValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSensorReplyMultiError(errors)
	}

	return nil
}

// ListSensorReplyMultiError is an error wrapping multiple validation errors
// returned by ListSensorReply.ValidateAll() if the designated constraints
// aren't met.
type ListSensorReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSensorReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSensorReplyMultiError) AllErrors() []error { return m }

// ListSensorReplyValidationError is the validation error returned by
// ListSensorReply.Validate if the designated constraints aren't met.
type ListSensorReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSensorReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSensorReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSensorReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSensorReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSensorReplyValidationError) ErrorName() string { return "ListSensorReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSensorReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSensorReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSensorReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSensorReplyValidationError{}

// Validate checks the field values on Sensor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Sensor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sensor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SensorMultiError, or nil if none found.
func (m *Sensor) ValidateAll() error {
	return m.validate(true)
}

func (m *Sensor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Location

	if len(errors) > 0 {
		return SensorMultiError(errors)
	}

	return nil
}

// SensorMultiError is an error wrapping multiple validation errors returned by
// Sensor.ValidateAll() if the designated constraints aren't met.
type SensorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SensorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SensorMultiError) AllErrors() []error { return m }

// SensorValidationError is the validation error returned by Sensor.Validate if
// the designated constraints aren't met.
type SensorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SensorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SensorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SensorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SensorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SensorValidationError) ErrorName() string { return "SensorValidationError" }

// Error satisfies the builtin error interface
func (e SensorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSensor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SensorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SensorValidationError{}
