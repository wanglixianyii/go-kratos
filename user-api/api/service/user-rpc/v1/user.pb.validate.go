// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/service/user-rpc/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateUserReqMultiError, or
// nil if none found.
func (m *CreateUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Mobile

	if len(errors) > 0 {
		return CreateUserReqMultiError(errors)
	}

	return nil
}

// CreateUserReqMultiError is an error wrapping multiple validation errors
// returned by CreateUserReq.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReqMultiError) AllErrors() []error { return m }

// CreateUserReqValidationError is the validation error returned by
// CreateUserReq.Validate if the designated constraints aren't met.
type CreateUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReqValidationError) ErrorName() string { return "CreateUserReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReqValidationError{}

// Validate checks the field values on MobileReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MobileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MobileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MobileReqMultiError, or nil
// if none found.
func (m *MobileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MobileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mobile

	if len(errors) > 0 {
		return MobileReqMultiError(errors)
	}

	return nil
}

// MobileReqMultiError is an error wrapping multiple validation errors returned
// by MobileReq.ValidateAll() if the designated constraints aren't met.
type MobileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MobileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MobileReqMultiError) AllErrors() []error { return m }

// MobileReqValidationError is the validation error returned by
// MobileReq.Validate if the designated constraints aren't met.
type MobileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MobileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MobileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MobileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MobileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MobileReqValidationError) ErrorName() string { return "MobileReqValidationError" }

// Error satisfies the builtin error interface
func (e MobileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMobileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MobileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MobileReqValidationError{}

// Validate checks the field values on UsernameReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UsernameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsernameReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UsernameReqMultiError, or
// nil if none found.
func (m *UsernameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UsernameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return UsernameReqMultiError(errors)
	}

	return nil
}

// UsernameReqMultiError is an error wrapping multiple validation errors
// returned by UsernameReq.ValidateAll() if the designated constraints aren't met.
type UsernameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsernameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsernameReqMultiError) AllErrors() []error { return m }

// UsernameReqValidationError is the validation error returned by
// UsernameReq.Validate if the designated constraints aren't met.
type UsernameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsernameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsernameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsernameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsernameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsernameReqValidationError) ErrorName() string { return "UsernameReqValidationError" }

// Error satisfies the builtin error interface
func (e UsernameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsernameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsernameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsernameReqValidationError{}

// Validate checks the field values on IdReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdReqMultiError, or nil if none found.
func (m *IdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IdReqMultiError(errors)
	}

	return nil
}

// IdReqMultiError is an error wrapping multiple validation errors returned by
// IdReq.ValidateAll() if the designated constraints aren't met.
type IdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReqMultiError) AllErrors() []error { return m }

// IdReqValidationError is the validation error returned by IdReq.Validate if
// the designated constraints aren't met.
type IdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReqValidationError) ErrorName() string { return "IdReqValidationError" }

// Error satisfies the builtin error interface
func (e IdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReqValidationError{}

// Validate checks the field values on UserInfoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoRespMultiError, or
// nil if none found.
func (m *UserInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Password

	// no validation rules for Mobile

	// no validation rules for Username

	// no validation rules for Gender

	// no validation rules for AvatarId

	if len(errors) > 0 {
		return UserInfoRespMultiError(errors)
	}

	return nil
}

// UserInfoRespMultiError is an error wrapping multiple validation errors
// returned by UserInfoResp.ValidateAll() if the designated constraints aren't met.
type UserInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoRespMultiError) AllErrors() []error { return m }

// UserInfoRespValidationError is the validation error returned by
// UserInfoResp.Validate if the designated constraints aren't met.
type UserInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoRespValidationError) ErrorName() string { return "UserInfoRespValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoRespValidationError{}

// Validate checks the field values on CheckPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPasswordReqMultiError, or nil if none found.
func (m *CheckPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	// no validation rules for EncryptedPassword

	if len(errors) > 0 {
		return CheckPasswordReqMultiError(errors)
	}

	return nil
}

// CheckPasswordReqMultiError is an error wrapping multiple validation errors
// returned by CheckPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type CheckPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPasswordReqMultiError) AllErrors() []error { return m }

// CheckPasswordReqValidationError is the validation error returned by
// CheckPasswordReq.Validate if the designated constraints aren't met.
type CheckPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPasswordReqValidationError) ErrorName() string { return "CheckPasswordReqValidationError" }

// Error satisfies the builtin error interface
func (e CheckPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPasswordReqValidationError{}

// Validate checks the field values on CheckPasswordResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckPasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPasswordRespMultiError, or nil if none found.
func (m *CheckPasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return CheckPasswordRespMultiError(errors)
	}

	return nil
}

// CheckPasswordRespMultiError is an error wrapping multiple validation errors
// returned by CheckPasswordResp.ValidateAll() if the designated constraints
// aren't met.
type CheckPasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPasswordRespMultiError) AllErrors() []error { return m }

// CheckPasswordRespValidationError is the validation error returned by
// CheckPasswordResp.Validate if the designated constraints aren't met.
type CheckPasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPasswordRespValidationError) ErrorName() string {
	return "CheckPasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPasswordRespValidationError{}
